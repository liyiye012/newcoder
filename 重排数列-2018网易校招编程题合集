/*分类讨论下。
显然，任意数和 4 的倍数相乘，其结果仍是 4 的倍数；
显然，若存在任意数量 2 的倍数，两两之间乘起来就是 4 的倍数；
如果存在一个数不是 2 的倍数，即它是一个奇数：
放在 2 的倍数旁边，一定不符合要求；
放在 4 的倍数旁边，相乘结果仍是 4 的倍数。
因此符合要求的排列分两种情况：
存在 2 的倍数，所有 2 的倍数相邻排列，需要一个 4 的倍数连接剩下的数，奇数最多和 4 的倍数数量相等，要求 countMod4 >= countOdd
没有 2 的倍数，原本放 2 的倍数一端可以改放一个奇数，countMod4 >= countOdd - 1*/
#include<iostream>
#include<vector>
using namespace std;
int main(){
    int t=0;
    cin>>t;
    for(int i=0;i<t;i++){
     int n=0;
    cin>>n; 
   //cout<<"running"<<endl;
    int temp=0;
    int cnt1=0;
    int cnt4=0;
    int cnt2=0;
    for(int i=0;i<n;i++){
        cin>>temp; 
        if(temp%2==1) cnt1++;
        else if(temp%4==0) cnt4++;
        else cnt2++;
    }
    if(cnt2 && cnt4>=cnt1)  cout<<"Yes"<<endl;
    else if(!cnt2 && cnt4>=cnt1-1)  cout<<"Yes"<<endl;
    else   cout<<"No"<<endl;
    }
    return 0;
}

