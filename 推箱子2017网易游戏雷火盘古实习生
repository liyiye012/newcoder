//#include<iostream>
//#include<vector>
//#include<cmath>
//#include<algorithm>
//#include<queue>
//#include<cstring>
//using namespace std;
//typedef long long ll;
//char mp[10][10];//0<N，M<=8
//int vis[10][10][10][10];
//int data[4][2] = { 0,1,0,-1,1,0,-1,0 };
//int n, m;
//struct node {
//    int x, y, step;//x,y代表人的位置
//    int xx, yy;//xx,yy代表箱子的位置
//    node(int _x, int _y, int _step, int _xx, int _yy) {
//        x = _x, y = _y, step = _step, xx = _xx, yy = _yy;
//    }
//};
//int bfs(int sxx, int syy, int sx, int sy) {
// 
//}
//int main() {
//    //接下来有N行，每行包含M个字符表示该行地图。其中 . 表示空地、X表示玩家、*表示箱子、#表示障碍、@表示目的地。
//    freopen("in.txt", "r", stdin);
//    int N, M;
//    cin >> N >> M;
//    char c ;
//    for (int i = 0; i < N; i++) {
//        for (int j = 0; j < M; j++) {
//            cin >> c;
//            mp[i][j] = c;
//        }
//    }
//    int sx, sy, xx, yy;
//    for (int i = 1; i <= n; i++) {
//        for (int j = 1; j <= m; j++) {
//            if (mp[i][j] == 'X') sx = i, sy = j;//sx,sy代表人的位置
//            if (mp[i][j] == '*') xx = i, yy = j;//xx,yy代表箱子的位置
//        }
//    }
//    cout << bfs(xx, yy, sx, sy) << endl;
//    return 0;
//}

#include<iostream>
#include<stdio.h>
#include<queue>
using namespace std;
struct Node {
    int x, y, xb, yb;
    Node(int x, int y, int xb, int yb) :x(x), y(y), xb(xb), yb(yb) {}
};
int a[] = { 0,0,1,-1 }, b[] = { 1,-1,0,0 };//方向数组
char mp[10][10];
int vis[10][10][10][10]; //用来存放当前点到终点已经走过了多少步
//程序分为两步走：人还没到箱子处，人走，箱子不动   人到达箱子处，人和箱子一起动
int bx, by, sx, sy, ex, ey, n, m;
int bfs()
{
    vis[sx][sy][bx][by] = 1;//表示点 (sx,sy) 到点 (bx,by)之前已经走过的步数为1。
    Node p(sx, sy, bx, by);
    queue<Node> que;//用队列来存储待搜索的点。
    que.push(p);
    while (que.size())//最坏的情况是搜索完全部的点后不能到达终点， 所以队列不为空时会一直进行下去。
     {
        p = que.front(); que.pop();
        if (p.xb == ex&&p.yb == ey)return vis[p.x][p.y][p.xb][p.yb] - 1;//已经到达目的地，箱子位置==目的地位置
        for (int i = 0; i<4; i++)//BFS 向四周探索,每次分四个方向走，所以是一个四层循环。
        {
            int nx = p.x + a[i], ny = p.y + b[i];
            if (nx<0 || ny<0 || mp[nx][ny] == '#' || nx >= n || ny >= m)continue;//越界或者遇到障碍物
            if (nx == p.xb&&ny == p.yb)//人走到了箱子位置，到达之后，人开始推着箱子前进，所有人和箱子始终是一个方向的
           {
                if (nx + a[i]<0 || ny + b[i]<0 || mp[nx + a[i]][ny + b[i]] == '#' || nx + a[i] >= n || ny + b[i] >= m)continue;//箱子被推到的下一个位置越界或遇到障碍物
                if (vis[nx][ny][nx + a[i]][ny + b[i]])continue;//下一个位置已经走过
                vis[nx][ny][nx + a[i]][ny + b[i]] = vis[p.x][p.y][p.xb][p.yb] + 1;
                //接下来人就换着方向推箱子去找终点
                que.push(Node(nx, ny, nx + a[i], ny + b[i]));
            }
            else {//人没有走到箱子位置
                if (vis[nx][ny][p.xb][p.yb])continue;//人将要到达的位置已经走过
                vis[nx][ny][p.xb][p.yb] = vis[p.x][p.y][p.xb][p.yb] + 1;
                //接下来人就换着方向推箱子去找终点
                que.push(Node(nx, ny, p.xb, p.yb));
            }
        }
    }
    return -1;
}
int main()
{
    scanf("%d%d", &n, &m);
    for (int i = 0; i<n; i++)
        scanf("%s", mp[i]);//以字符串形式输入
    for (int i = 0; i<n; i++)
        for (int j = 0; j<m; j++)
            if (mp[i][j] == '*')bx = i, by = j; //箱子
            else if (mp[i][j] == 'X')sx = i, sy = j;//玩家位置
            else if (mp[i][j] == '@')ex = i, ey = j;//目的地位置
            cout << bfs() << endl;
            return 0;
}

